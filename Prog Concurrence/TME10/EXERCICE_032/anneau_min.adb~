with Ada.Text_IO, Ada.Numerics.Discrete_Random;
use Ada.Text_IO;

procedure anneau_min is

NBSITE : constant positive := 4;

type tache;
type acc_tache is access tache;

task type tache(Valeur : natural) is	
  -- Recupere le pointeur sur la tache suivante
  entry init (succ : in acc_tache);

  -- reception du minimum identifie par la tache precedente
  -- Si la tache qui recoit est celle qui a debute le calcul, elle affiche le 
  -- minimum sinon elle met a jour son minimum local et transmet l'information
  --  a la suivante
  entry recevoir(mes : natural);

  -- entree appelee par la tache Creer_Anneau pour demarrer un calcul de minimum.
  -- La tache qui debute le calcul est aussi celle qui affiche le resultat
  entry calcul_Min;
end tache;                

task Creer_Anneau is 
  -- entree grace a laquelle la tache Creer_Anneau est avertie de la fin d'un
  -- calcul 
  entry fin_calcul;
end Creer_Anneau;

task body Creer_Anneau is
package Random_Natural is new Ada.Numerics.Discrete_Random (Natural);
  use Random_Natural;
  G : generator;
  premier : acc_tache;
  curr : acc_tache;
  suc : acc_tache;
  n : natural;
begin
  reset(G);
  n := random(G) mod 100;
  put_line("creation de "&natural'image(n));
  premier := new tache(n);
  curr := premier;
  for I in 1..NBSITE-1 loop
    n := random(G) mod 100;
    put_line("creation de "&natural'image(n));
    suc := new tache(n);
    curr.all.init(suc);
    curr := suc;
  end loop;
  suc.all.init(premier);
  put_line("fin de la creation de l'anneau");
  premier.all.calcul_Min;
  accept fin_calcul do
    put_line("Le premier calcul est terminÃ©");
    curr.all.calcul_Min;
  end fin_calcul;
  -- A COMPLETER avec les instructions de creation de l'anneau et de 
  -- l'attribution d'une valeur aleatoire au discriminant de chaque tache
   
  -- A COMPLETER avec les instructions pour lancer deux calculs
  -- Pour chacun des calculs, vous devez choisir la tache initiatrice
  --  N'oubliez pas de terminer un calcul avant d'en commencer un autre
		
end Creer_Anneau;

task body tache is                  
  suivant : acc_tache;
  min_loc : natural := Valeur;
begin
  accept init(succ : in acc_tache) do
    suivant := succ;
  end init;

  select
    accept calcul_Min;
    put_line("On commence le calcul.");
    suivant.all.recevoir(Valeur);
    accept recevoir(mes : natural) do
      put_line("Le min est"&natural'image(mes));
    end recevoir;
    Creer_Anneau.fin_calcul;
  or
    accept recevoir(mes : natural) do
      --put_line("En cours mes => "&natural'image(mes)&" Valeur =>"&natural'image(Valeur));
      if mes < Valeur then
        min_loc := mes;
      end if;
    end recevoir;
    suivant.all.recevoir(min_loc);
  end select;

end tache;                       

begin
   null;
end anneau_min;    
